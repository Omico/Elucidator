//
// Generated by DslGenerator from Elucidator. Do not edit directly!!!
//
package me.omico.elucidator

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import kotlin.Annotation
import kotlin.Any
import kotlin.Deprecated
import kotlin.String
import kotlin.Unit
import kotlin.collections.Iterable

@ElucidatorDsl
public interface KtFileScope {
  public val builder: FileSpec.Builder

  public fun build(): FileSpec
}

internal class KtFileBuilder(
  override val builder: FileSpec.Builder,
) : KtFileScope {
  override fun build(): FileSpec = builder.build()
}

public fun KtFileScope.addFileComment(format: String, vararg args: Any) {
  builder.addFileComment(format = format, args = args)
}

public fun KtFileScope.addFunction(funSpec: FunSpec) {
  builder.addFunction(funSpec = funSpec)
}

public fun KtFileScope.addProperty(propertySpec: PropertySpec) {
  builder.addProperty(propertySpec = propertySpec)
}

public fun KtFileScope.addStatement(format: String, vararg args: Any) {
  builder.addStatement(format = format, args = args)
}

public fun KtFileScope.addType(typeSpec: TypeSpec) {
  builder.addType(typeSpec = typeSpec)
}

public fun KtFileScope.indent(indent: String) {
  builder.indent(indent = indent)
}

public fun FileSpec.Builder.applyDslBuilder(builder: KtFileScope.() -> Unit): FileSpec.Builder = KtFileBuilder(this).apply(builder).builder

public fun KtFileScope.addAnnotation(name: String, block: TypeScope.() -> Unit = {}): Unit = annotationType(name, block).let(::addType)

public fun KtFileScope.addClass(name: String, block: TypeScope.() -> Unit = {}): Unit = classType(name, block).let(::addType)

public fun KtFileScope.addEnum(name: String, block: TypeScope.() -> Unit = {}): Unit = enumType(name, block).let(::addType)

public fun KtFileScope.addFunInterface(name: String, block: TypeScope.() -> Unit = {}): Unit = funInterfaceType(name, block).let(::addType)

public fun KtFileScope.addInterface(name: String, block: TypeScope.() -> Unit = {}): Unit = interfaceType(name, block).let(::addType)

public fun KtFileScope.addObject(name: String, block: TypeScope.() -> Unit = {}): Unit = objectType(name, block).let(::addType)

@Deprecated(
  message = "In Elucidator, we use the `addAnnotation` function to create new annotations. Use the `annotate` function instead.",
  replaceWith = ReplaceWith("annotate(annotationSpec)"),
  level = DeprecationLevel.WARNING,
)
public fun KtFileScope.addAnnotation(annotationSpec: AnnotationSpec) {
  builder.addAnnotation(annotationSpec = annotationSpec)
}

@Deprecated(
  message = "In Elucidator, we use the `addAnnotation` function to create new annotations. Use the `annotate` function instead.",
  replaceWith = ReplaceWith("annotate(annotationSpecs)"),
  level = DeprecationLevel.WARNING,
)
public fun KtFileScope.addAnnotations(annotationSpecs: Iterable<AnnotationSpec>) {
  builder.addAnnotations(annotationSpecs = annotationSpecs)
}

public inline fun <reified T : Annotation> KtFileScope.annotate(noinline block: AnnotationScope.() -> Unit) {
  annotation(type = T::class, block = block).let(this::annotate)
}

public fun KtFileScope.annotate(annotationSpec: AnnotationSpec) {
  builder.addAnnotation(annotationSpec = annotationSpec)
}

public fun KtFileScope.annotate(annotationSpecs: Iterable<AnnotationSpec>) {
  builder.addAnnotations(annotationSpecs = annotationSpecs)
}

public fun KtFileScope.annotate(vararg annotationSpecs: AnnotationSpec) {
  builder.addAnnotations(annotationSpecs = annotationSpecs.toList())
}

public fun KtFileScope.annotate(`annotation`: ClassName) {
  builder.addAnnotation(annotation = annotation)
}

public inline fun <reified T> KtFileScope.annotate() {
  builder.addAnnotation(annotation = T::class)
}
