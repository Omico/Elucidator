//
// Generated by DslGenerator from Elucidator. Do not edit directly!!!
//
package me.omico.elucidator

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterSpec
import kotlin.Annotation
import kotlin.Any
import kotlin.Deprecated
import kotlin.String
import kotlin.Unit
import kotlin.collections.Iterable

@ElucidatorDsl
public interface ParameterScope {
  public val builder: ParameterSpec.Builder

  public fun build(): ParameterSpec
}

internal class ParameterBuilder(
  override val builder: ParameterSpec.Builder,
) : ParameterScope {
  override fun build(): ParameterSpec = builder.build()
}

public fun ParameterScope.addKdoc(format: String, vararg args: Any) {
  builder.addKdoc(format = format, args = args)
}

public fun ParameterScope.addKdoc(block: CodeBlock) {
  builder.addKdoc(block = block)
}

public fun ParameterScope.addModifiers(modifiers: Iterable<KModifier>) {
  builder.addModifiers(modifiers = modifiers)
}

public fun ParameterScope.addModifiers(vararg modifiers: KModifier) {
  builder.addModifiers(modifiers = modifiers)
}

public fun ParameterSpec.Builder.applyDslBuilder(builder: ParameterScope.() -> Unit): ParameterSpec.Builder = ParameterBuilder(this).apply(builder).builder

public fun ParameterScope.clearModifiers(): Unit = builder.modifiers.clear()

public fun ParameterScope.modifiers(vararg modifiers: KModifier) {
  clearModifiers()
  addModifiers(modifiers = modifiers)
}

public fun ParameterScope.modifiers(modifiers: Iterable<KModifier>) {
  clearModifiers()
  addModifiers(modifiers = modifiers)
}

public fun ParameterScope.modifier(modifier: KModifier): Unit = modifiers(modifier)

@Deprecated(
  message = "In Elucidator, we use the `addAnnotation` function to create new annotations. Use the `annotate` function instead.",
  replaceWith = ReplaceWith("annotate(annotationSpec)"),
  level = DeprecationLevel.WARNING,
)
public fun ParameterScope.addAnnotation(annotationSpec: AnnotationSpec) {
  builder.addAnnotation(annotationSpec = annotationSpec)
}

@Deprecated(
  message = "In Elucidator, we use the `addAnnotation` function to create new annotations. Use the `annotate` function instead.",
  replaceWith = ReplaceWith("annotate(annotationSpecs)"),
  level = DeprecationLevel.WARNING,
)
public fun ParameterScope.addAnnotations(annotationSpecs: Iterable<AnnotationSpec>) {
  builder.addAnnotations(annotationSpecs = annotationSpecs)
}

public inline fun <reified T : Annotation> ParameterScope.annotate(noinline block: AnnotationScope.() -> Unit) {
  annotation(type = T::class, block = block).let(this::annotate)
}

public fun ParameterScope.annotate(annotationSpec: AnnotationSpec) {
  builder.addAnnotation(annotationSpec = annotationSpec)
}

public fun ParameterScope.annotate(annotationSpecs: Iterable<AnnotationSpec>) {
  builder.addAnnotations(annotationSpecs = annotationSpecs)
}

public fun ParameterScope.annotate(vararg annotationSpecs: AnnotationSpec) {
  builder.addAnnotations(annotationSpecs = annotationSpecs.toList())
}

public fun ParameterScope.annotate(`annotation`: ClassName) {
  builder.addAnnotation(annotation = annotation)
}

public inline fun <reified T> ParameterScope.annotate() {
  builder.addAnnotation(annotation = T::class)
}
