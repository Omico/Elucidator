/*
 * Copyright 2023 Omico
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@file:JvmName("DslGenerator")

package me.omico.elucidator

import me.omico.delusion.kotlin.compiler.embeddable.DelusionKotlinEnvironment
import me.omico.delusion.kotlin.compiler.embeddable.delusionKotlinEnvironment
import me.omico.delusion.kotlin.compiler.embeddable.sourceFiles
import me.omico.elucidator.function.addDslScopeExtensionFunctions
import me.omico.elucidator.function.custom.addTypeExtensionFunctions
import me.omico.elucidator.psi.addDslExtensionsFromPsi
import me.omico.elucidator.psi.extension.addAnnotateExtensionFunctions
import me.omico.elucidator.psi.utility.findChildren
import me.omico.elucidator.type.addDslBuilderClass
import me.omico.elucidator.type.addDslScopeInterface
import me.omico.elucidator.utility.clearDirectory
import org.jetbrains.kotlin.psi.KtClass
import java.io.File
import kotlin.io.path.Path

fun main(arguments: Array<String>) {
    val kotlinpoetSourceDirectory = File(arguments[0])
    val outputDirectory = Path(arguments[1])
    outputDirectory.clearDirectory()
    delusionKotlinEnvironment {
        addKotlinSourceRoot(kotlinpoetSourceDirectory)
        val annotatableSpecFqNames = filterSpecFqNames("com.squareup.kotlinpoet.Annotatable")
        generatedTypes.forEach { type ->
            ktFile(GENERATED_PACKAGE_NAME, type.generatedFileName) {
                addFileComment(GENERATED_HEADER_COMMENT)
                addDslScopeInterface(type)
                addDslBuilderClass(type)
                addDslScopeExtensionFunctions(type)
                addDslExtensionsFromPsi(this@delusionKotlinEnvironment)
                addTypeExtensionFunctions(type)
                addAnnotateExtensionFunctions(annotatableSpecFqNames, type)
                writeTo(outputDirectory)
            }
        }
    }
}

private fun DelusionKotlinEnvironment.filterSpecFqNames(superTypeFullQualifierName: String): Set<String> =
    sourceFiles
        .asSequence()
        .flatMap { ktFile -> ktFile.findChildren<KtClass>() }
        .filter { ktClass -> ktClass.hasSuperType(superTypeFullQualifierName) && ktClass.name!!.endsWith("Spec") }
        .mapNotNull { it.fqName?.asString() }
        .toSortedSet()

internal const val GENERATED_PACKAGE_NAME = "me.omico.elucidator"

private val GENERATED_HEADER_COMMENT: String =
    """
    |
    |Generated by DslGenerator from Elucidator. Do not edit directly!!!
    |
    """.trimMargin()
